*** Settings ***
Library	OperatingSystem
Library	String
Library	Process
Library	Collections
Library	QctoolRunner	../../build/release/qctool_v2.0-beta4
Library	QctoolTest

*** Variables ***
${TMPDIR}	${CURDIR}/tmp
${HOME}	%{HOME}
${QCTOOL}	../../build/release/qctool_v2.0-beta4

*** Test cases ***
Runs basic commands
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "s": [ "data/test.sample" ], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "s": [ "data/test.sample" ], "snp-stats": "" }	fail
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "s": [ "data/test.sample" ], "og": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "s": [ "data/test.sample" ], "sample-stats": "" }	fail
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "s": [ "data/test.sample" ], "sample-stats": "", "osample": "<tmp>" }	ok

Accepts output formats
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>", "ofiletype": "gen" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>", "ofiletype": "vcf" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>", "ofiletype": "bgen" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>", "ofiletype": "bgen_v1.1" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>", "ofiletype": "dosage" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "og": "<tmp>", "ofiletype": "bed" }	ok
	RunsCommandWithResult	{ "g": ["data/test.shapeit" ], "s": [ "data/complex.sample"], "filetype": "shapeit_haplotypes", "og": "<tmp>", "ofiletype": "shapeit_haplotypes" }	ok

Accepts input files
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test_#.gen" ], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen.gz" ], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v4.1.vcf"], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v4.1.vcf.gz"], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v4.2.vcf"], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.bgen"], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v12.bgen"], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.bed"], "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen" ], "filetype": "gen", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.gen.gz" ], "filetype": "gen", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v4.1.vcf"], "filetype": "vcf", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v4.1.vcf.gz"], "filetype": "vcf", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v4.2.vcf"], "filetype": "vcf", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.bgen"], "filetype": "bgen", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.v12.bgen"], "filetype": "bgen", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.bed"], "filetype": "binary_ped", "snp-stats": "", "osnp": "<tmp>" }	ok
	RunsCommandWithResult	{ "g": ["data/test.shapeit"], "s": [ "data/complex.sample" ], "filetype": "shapeit_haplotypes", "snp-stats": "", "osnp": "<tmp>" }	ok

Produces well-formed snp stats output
	@{commandSpecs}=	Create List	{ "snp-stats": "", "osnp": "<tmp>" }
	Set data	{ "g": ["data/test.gen"], "s": ["data/test.sample"] }
	:FOR	${commandSpec}	IN	@{commandSpecs}
	\	${startChar}=	Get Substring	${commandSpec}	0	1
	\	Run Keyword If	'${startChar}' != '\#'	ProducesWellFormedSnpStatsOutput	${commandSpec}

Computes correct snp stats
	CheckRun	Rscript	--vanilla	stats_test.R	--qctool	${QCTOOL}

Correctly merges files
	${filenames}=	Run Qctool	{ "g": ["data/merge1.gen"], "s": [ "data/merge1.sample" ], "merge-in": [ "data/merge2.gen", "data/merge2.sample" ], "og": "<tmp>" }	ok
	${filename}=	Get Variable Value	${filenames['og']}
	CheckRun	Rscript	--vanilla	compare_gen_files.R	--file1	${filename}	--file2	data/merged.gen

Produces well-formed sample output
	@{commandSpecs}=	Create List	{ "sample-stats": "", "osample": "<tmp>" }
	Set data	{ "g": ["data/test.gen"], "s": ["data/test.sample"] }
	:FOR	${commandSpec}	IN	@{commandSpecs}
	\	${startChar}=	Get Substring	${commandSpec}	0	1
	\	Run Keyword If	'${startChar}' != '\#'	ProducesWellFormedSampleStatsOutput	${commandSpec}

Accepts Different VCF fields
	ProducesWellFormedSnpStatsOutput	{ "g": ["data/test.v4.2.vcf"], "s": ["data/test.sample" ], "snp-stats":"", "vcf-genotype-field": "GT", "osnp": "<tmp>" }
	ProducesWellFormedSnpStatsOutput	{ "g": ["data/test.v4.2.vcf"], "s": ["data/test.sample" ], "snp-stats":"", "vcf-genotype-field": "GP", "osnp": "<tmp>" }

Accepts Windows line endings
	ProducesWellFormedSnpStatsOutput	{ "g": [ "data/test.gen" ], "s":["data/test.windows.sample"], "snp-stats":"", "osnp": "<tmp>" }

Processes complex bgen file
	RunsCommandWithResult	{ "g": ["data/complex.bgen"], "s": [ "data/complex.sample"], "og": "<tmp>", "ofiletype": "vcf" }	ok
	RunsCommandWithResult	{ "g": ["data/complex.bgen"], "s": [ "data/complex.sample"], "og": "<tmp>", "ofiletype": "bgen" }	ok

Annotates BED intervals
	RunsCommandWithColumns	{ "g": ["data/imputed.bgen"], "s": [ "data/imputed.sample"], "osnp": "<tmp>", "-snp-stats": [], "annotate-bed3": [ "data/annotation1.bed" ] }	data/annotation1
	RunsCommandWithColumns	{ "g": ["data/imputed.bgen"], "s": [ "data/imputed.sample"], "osnp": "<tmp>", "-snp-stats": [], "annotate-bed3": [ "data/annotation1.bed", "data/annotation2.bed" ] }	data/annotation1	data/annotation2
	RunsCommandWithColumns	{ "g": ["data/imputed.bgen"], "s": [ "data/imputed.sample"], "osnp": "<tmp>", "-snp-stats": [], "annotate-bed4": [ "data/annotation1.bed" ] }	data/annotation1
	RunsCommandWithResult	{ "g": ["data/imputed.bgen"], "s": [ "data/imputed.sample"], "osnp": "<tmp>", "-snp-stats": [], "annotate-bed4": [ "data/annotation2.bed" ] }	fail
	RunsCommandWithColumns	{ "g": ["data/imputed.bgen"], "s": [ "data/imputed.sample"], "osnp": "<tmp>", "-snp-stats": [], "annotate-bed3": [ "data/annotation2.bed" ], "annotate-bed4": [ "data/annotation1.bed" ] }	data/annotation1	data/annotation2

Roundtrips gen files via bgen (v1.1)
	CheckRun	Rscript	--vanilla	random_test_bgen.R	--bits	16	--iterations	1	--max_samples	100	--bgen_version	v1.1	--qctool	${QCTOOL}

Roundtrips allele probs formats
	CheckRun	Rscript	--vanilla	test_allele_probs_format.R

Roundtrips gen files via bgen (v1.2, even bit counts)
	:FOR	${bits}	IN	2	4	6	8	10	12	14	16	18	20	22	24	26	28	30	32
	\	CheckRun	Rscript	--vanilla	random_test_bgen.R	--bits	${bits}	--iterations	1	--max_samples	100	--bgen_version	v1.2	--qctool	${QCTOOL}

Roundtrips gen files via bgen (v1.2, odd bit counts)
	:FOR	${bits}	IN	1	3	5	7	9	11	13	15	17	19	21	23	25	27	29	31
	\	CheckRun	Rscript	--vanilla	random_test_bgen.R	--bits	${bits}	--iterations	1	--max_samples	100	--bgen_version	v1.2	--qctool	${QCTOOL}

*** Keywords ***

CheckRun
	[Arguments]	@{command}
	${result} =	Run Process	@{command}
	ShouldBeEqualAsIntegers	${result.rc}	0

RunsCommandWithResult
	[Arguments]	${command}	${expected_result}
	Run Qctool	${command}	${expected_result}

RunsCommandWithColumns
	[Arguments]	${command}	@{columns}
	${filenames}=	Run Qctool	${command}	ok
	${filename}=	Get Variable Value	${filenames['osnp']}
	:FOR	${elt}	IN	@{columns}
	\	Has Column Matching	${filename}	${elt}

ProducesWellFormedSampleStatsOutput
	[Arguments]	${command}
	${filenames}=	Run Qctool	${command}	ok
	${filename}=	Get Variable Value	${filenames['osample']}
	IsWellFormed	${filename}
	HasSameLineCount	${filename}	data/test.sample	2
	Has Column Matching	${filename}	sample
	Has Column Matching	${filename}	index
	Has Column Matching	${filename}	missing_proportion
	Has Column Matching	${filename}	heterozygous_proportion

ProducesWellFormedSnpStatsOutput
	[Arguments]	${command}
	${filenames}=	Run Qctool	${command}	ok
	${filename}=	Get Variable Value	${filenames['osnp']}
	IsWellFormed	${filename}
	HasSameLineCount	${filename}	data/test.gen	0
	Has Column Matching	${filename}	rsid
	Has Column Matching	${filename}	chromosome
	Has Column Matching	${filename}	position
	Has Column Matching	${filename}	alleleA
	Has Column Matching	${filename}	alleleB
	Has Column Matching	${filename}	comment
	Has Column Matching	${filename}	A
	Has Column Matching	${filename}	B
	Has Column Matching	${filename}	AA
	Has Column Matching	${filename}	AB
	Has Column Matching	${filename}	BB
	Has Column Matching	${filename}	alleleA_frequency
	Has Column Matching	${filename}	alleleB_frequency
	Has Column Matching	${filename}	minor_allele_frequency
	Has Column Matching	${filename}	NULL
	Has Column Matching	${filename}	missing_proportion
	Has Column Matching	${filename}	info
	Has Column Matching	${filename}	impute_info
	Has Column Matching	${filename}	HW_exact_p_value
	Has Column Matching	${filename}	HW_lrt_p_value
	
HasSameLineCount
	[Arguments]	${filename}	${other_filename}	${other_skip}
	Matches Linecount	${filename}	${other_filename}	${other_skip}

IsWellFormed
    [Arguments]     ${filename}
	Has Valid Metadata	${filename}
	Has Column Header	${filename}
	Has Footer	${filename}
